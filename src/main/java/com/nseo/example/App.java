/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.nseo.example;

import org.apache.commons.io.IOUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.StatusLine;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.AuthCache;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.impl.auth.BasicScheme;
import org.apache.http.impl.client.BasicAuthCache;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;

public class App
{
    static final String HOST_NAME = "localhost";
    static final int PORT_NUMBER = 9990;
    static final String HTTP_SCHEME = " https";
    static final String HTTP_URL = HTTP_SCHEME + "://" + HOST_NAME + ":" + PORT_NUMBER + "/url";

    public static void main(String[] args)
    {
        try
        {
            downloadHttpResponse();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    private static CloseableHttpClient createHttpClient() throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException
    {
        SSLContext sslContext = SSLContextBuilder
                .create()
                .loadTrustMaterial(new TrustSelfSignedStrategy())
                .build();

        HostnameVerifier allowAllHosts = new NoopHostnameVerifier();
        SSLConnectionSocketFactory connectionFactory = new SSLConnectionSocketFactory(sslContext, allowAllHosts);

        return HttpClients.custom()
                .setSSLSocketFactory(connectionFactory)
                .build();
    }

    private static HttpClientContext createBasicAuth()
    {
        HttpHost targetHost = new HttpHost(HOST_NAME, PORT_NUMBER, HTTP_SCHEME);
        CredentialsProvider credsProvider = new BasicCredentialsProvider();
        credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials("user", "pass"));

        AuthCache authCache = new BasicAuthCache();
        authCache.put(targetHost, new BasicScheme());

        // Add AuthCache to the execution context
        HttpClientContext context = HttpClientContext.create();
        context.setCredentialsProvider(credsProvider);
        context.setAuthCache(authCache);

        return context;
    }

    private static void downloadHttpResponse() throws NoSuchAlgorithmException, KeyStoreException, KeyManagementException, IOException
    {
        CloseableHttpClient client = createHttpClient();

        HttpGet httpGet = new HttpGet(HTTP_URL);
        HttpClientContext context = createBasicAuth();
        try (CloseableHttpResponse response = client.execute(httpGet, context))
        {
            StatusLine statusCode = response.getStatusLine();
            if (statusCode.getStatusCode() == 200)
            {
                final HttpEntity entity = response.getEntity();
                if (entity != null)
                {
                    try (InputStream inputStream = entity.getContent())
                    {
                        String path = System.getProperty("user.dir") + "/build/output.txt";
                        saveToFile(path, inputStream);
                    }
                }
            }
        }
    }

    private static void saveToFile(String path, InputStream inputStream) throws IOException
    {
        File file = new File(path);
        try (OutputStream outputStream = new FileOutputStream(file))
        {
            IOUtils.copy(inputStream, outputStream);
        }
    }
}
